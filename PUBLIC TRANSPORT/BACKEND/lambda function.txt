from __future__ import print_function
import urllib as url
import ast
global source
global dest
global dist
global vehi
source=""
dest=""
dist=""
vehi=""
def build_speechlet_response(title, output, reprompt_text, should_end_session):
    return {
        'outputSpeech': {
            'type': 'PlainText',
            'text': output
        },
        'card': {
            'type': 'Simple',
            'title': "SessionSpeechlet - " + title,
            'content': "SessionSpeechlet - " + output
        },
        'reprompt': {
            'outputSpeech': {
                'type': 'PlainText',
                'text': reprompt_text
            }
        },
        'shouldEndSession': should_end_session
    }


def build_response(session_attributes, speechlet_response):
    return {
        'version': '1.0',
        'sessionAttributes': session_attributes,
        'response': speechlet_response
    }

def get_welcome_response():
    session_attributes = {}
    card_title = "Welcome"
    speech_output = "Welcome to Public Transport System Chatbot ," \
                    " Please tell me how can i assit you." 
    reprompt_text = "I could not understand," \
                    "Please say again."
    should_end_session = False
    return build_response(session_attributes, build_speechlet_response(
        card_title, speech_output, reprompt_text, should_end_session))


def handle_session_end_request():
    card_title = "Session Ended"
    speech_output = "Thank you for trying public transport system " \
                    "Have a nice day! "
    # Setting this to true ends the session and exits the skill.
    should_end_session = True
    return build_response({}, build_speechlet_response(
        card_title, speech_output, None, should_end_session))


def create_favorite_color_attributes(favorite_color):
    return {"favoriteColor": favorite_color}


def set_transport_in_session(intent, session):
    card_title = intent['name']
    session_attributes = {}
    should_end_session = False
    speech_output="Sure I Can Help you in Travelling, Tell me from where do you want to travel "
    reprompt_text="I am not sure , can you say again "
    return build_response(session_attributes, build_speechlet_response(
        card_title, speech_output, reprompt_text, should_end_session))

def set_source_in_session(intent, session):
    card_title = intent['name']
    session_attributes = {}
    should_end_session = False
    source=intent['slots']['sourcee']['value']
    global source
    speech_output="Okay Your Source place was :"+intent['slots']['sourcee']['value'] + ", Tell me where do you want to go ?"
    reprompt_text="I am not sure , can you say again "
    return build_response(session_attributes, build_speechlet_response(
        card_title, speech_output, reprompt_text, should_end_session))

def set_desti_in_session(intent, session):
    card_title = intent['name']
    session_attributes = {}
    should_end_session = False
    dest=intent['slots']['desti']['value']
    global dest
    speech_output="Okay Your Destination place was :"+intent['slots']['desti']['value'] +",Tell me your mode of travel "
    reprompt_text="I am not sure , can you say again "
    return build_response(session_attributes, build_speechlet_response(
        card_title, speech_output, reprompt_text, should_end_session))

def set_vehicle_in_session(intent, session):
    card_title = intent['name']
    session_attributes = {}
    should_end_session = False
    vehi=intent['slots']['vehiclee']['value']
    print(source,dest)
    a=ast.literal_eval(url.urlopen('https://maps.googleapis.com/maps/api/distancematrix/json?origins='+source+'&destinations='+dest+'&key=AIzaSyBHv7qJyfcQBknY62RWGHAL0xPefLQzp98').read())['rows']
    dist1=a[0]['elements'][0]['distance']['text']
    duration1=a[0]['elements'][0]['duration']['text']
    print(dist1,duration1)
    speech_output="Okay Your Travel mode was on  :"+intent['slots']['vehiclee']['value']+" , Your are Travelling From "+source+" to "+dest+" and It will take "+duration1+" to reach your destination  and total kilometers to reach your destination is "+dist1
    reprompt_text="I am not sure , can you say again "
    return build_response(session_attributes, build_speechlet_response(
        card_title, speech_output, reprompt_text, should_end_session))
# --------------- Events ------------------

def on_session_started(session_started_request, session):
    """ Called when the session starts """

    print("on_session_started requestId=" + session_started_request['requestId']
          + ", sessionId=" + session['sessionId'])


def on_launch(launch_request, session):
    print("on_launch requestId=" + launch_request['requestId'] +
          ", sessionId=" + session['sessionId'])
    # Dispatch to your skill's launch
    return get_welcome_response()


def on_intent(intent_request, session):
    print("on_intent requestId=" + intent_request['requestId'] +
          ", sessionId=" + session['sessionId'])

    intent = intent_request['intent']
    intent_name = intent_request['intent']['name']

    # Dispatch to your skill's intent handlers
    if intent_name == "travel":
        return set_transport_in_session(intent, session)
    elif intent_name == "source":
        return set_source_in_session(intent, session)
    elif intent_name == "destination":
        return set_desti_in_session(intent, session)
    elif intent_name == "vehicle":
        return set_vehicle_in_session(intent, session)
    elif intent_name == "AMAZON.HelpIntent":
        return get_welcome_response()
    elif intent_name == "AMAZON.CancelIntent" or intent_name == "AMAZON.StopIntent":
        return handle_session_end_request()
    else:
        raise ValueError("Invalid intent")


def on_session_ended(session_ended_request, session):
    """ Called when the user ends the session.

    Is not called when the skill returns should_end_session=true
    """
    print("on_session_ended requestId=" + session_ended_request['requestId'] +
          ", sessionId=" + session['sessionId'])
    # add cleanup logic here


# --------------- Main handler ------------------

def lambda_handler(event, context):
    """ Route the incoming request based on type (LaunchRequest, IntentRequest,
    etc.) The JSON body of the request is provided in the event parameter.
    """
    print("event.session.application.applicationId=" +
          event['session']['application']['applicationId'])

    """
    Uncomment this if statement and populate with your skill's application ID to
    prevent someone else from configuring a skill that sends requests to this
    function.
    """
    # if (event['session']['application']['applicationId'] !=
    #         "amzn1.echo-sdk-ams.app.[unique-value-here]"):
    #     raise ValueError("Invalid Application ID")

    if event['session']['new']:
        on_session_started({'requestId': event['request']['requestId']},
                           event['session'])

    if event['request']['type'] == "LaunchRequest":
        return on_launch(event['request'], event['session'])
    elif event['request']['type'] == "IntentRequest":
        return on_intent(event['request'], event['session'])
    elif event['request']['type'] == "SessionEndedRequest":
        return on_session_ended(event['request'], event['session'])
